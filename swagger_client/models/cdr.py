# coding: utf-8

"""
    Data Analytics API

    Data Analytics API specification developed in-house at xFlow Research.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CDR(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cdr_id': 'str',
        'caller': 'str',
        'called': 'str',
        'calldate': 'str',
        'callend': 'str',
        'call_id': 'str',
        'duration': 'str',
        'connection_duration': 'str',
        'sipcallerip': 'str',
        'sipcallerport': 'str',
        'sipcalledip': 'str',
        'sipcalledport': 'str',
        'codec_a': 'str',
        'codec_b': 'str',
        'a_last_rtp_from_end': 'str',
        'b_last_rtp_from_end': 'str',
        'cell_id_caller': 'str',
        'cell_id_called': 'str',
        'imsi_contact': 'str',
        'imsi_request': 'str',
        'session_id': 'str'
    }

    attribute_map = {
        'cdr_id': 'cdrId',
        'caller': 'caller',
        'called': 'called',
        'calldate': 'calldate',
        'callend': 'callend',
        'call_id': 'callId',
        'duration': 'duration',
        'connection_duration': 'connection_duration',
        'sipcallerip': 'sipcallerip',
        'sipcallerport': 'sipcallerport',
        'sipcalledip': 'sipcalledip',
        'sipcalledport': 'sipcalledport',
        'codec_a': 'codec_a',
        'codec_b': 'codec_b',
        'a_last_rtp_from_end': 'a_last_rtp_from_end',
        'b_last_rtp_from_end': 'b_last_rtp_from_end',
        'cell_id_caller': 'Cell_ID_Caller',
        'cell_id_called': 'Cell_ID_Called',
        'imsi_contact': 'IMSI-Contact',
        'imsi_request': 'IMSI-Request',
        'session_id': 'Session-ID'
    }

    def __init__(self, cdr_id=None, caller=None, called=None, calldate=None, callend=None, call_id=None, duration=None, connection_duration=None, sipcallerip=None, sipcallerport=None, sipcalledip=None, sipcalledport=None, codec_a=None, codec_b=None, a_last_rtp_from_end=None, b_last_rtp_from_end=None, cell_id_caller=None, cell_id_called=None, imsi_contact=None, imsi_request=None, session_id=None):  # noqa: E501
        """CDR - a model defined in Swagger"""  # noqa: E501
        self._cdr_id = None
        self._caller = None
        self._called = None
        self._calldate = None
        self._callend = None
        self._call_id = None
        self._duration = None
        self._connection_duration = None
        self._sipcallerip = None
        self._sipcallerport = None
        self._sipcalledip = None
        self._sipcalledport = None
        self._codec_a = None
        self._codec_b = None
        self._a_last_rtp_from_end = None
        self._b_last_rtp_from_end = None
        self._cell_id_caller = None
        self._cell_id_called = None
        self._imsi_contact = None
        self._imsi_request = None
        self._session_id = None
        self.discriminator = None
        if cdr_id is not None:
            self.cdr_id = cdr_id
        if caller is not None:
            self.caller = caller
        if called is not None:
            self.called = called
        if calldate is not None:
            self.calldate = calldate
        if callend is not None:
            self.callend = callend
        if call_id is not None:
            self.call_id = call_id
        if duration is not None:
            self.duration = duration
        if connection_duration is not None:
            self.connection_duration = connection_duration
        if sipcallerip is not None:
            self.sipcallerip = sipcallerip
        if sipcallerport is not None:
            self.sipcallerport = sipcallerport
        if sipcalledip is not None:
            self.sipcalledip = sipcalledip
        if sipcalledport is not None:
            self.sipcalledport = sipcalledport
        if codec_a is not None:
            self.codec_a = codec_a
        if codec_b is not None:
            self.codec_b = codec_b
        if a_last_rtp_from_end is not None:
            self.a_last_rtp_from_end = a_last_rtp_from_end
        if b_last_rtp_from_end is not None:
            self.b_last_rtp_from_end = b_last_rtp_from_end
        if cell_id_caller is not None:
            self.cell_id_caller = cell_id_caller
        if cell_id_called is not None:
            self.cell_id_called = cell_id_called
        if imsi_contact is not None:
            self.imsi_contact = imsi_contact
        if imsi_request is not None:
            self.imsi_request = imsi_request
        if session_id is not None:
            self.session_id = session_id

    @property
    def cdr_id(self):
        """Gets the cdr_id of this CDR.  # noqa: E501

        The CDR ID of the retrieved CDR.  # noqa: E501

        :return: The cdr_id of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._cdr_id

    @cdr_id.setter
    def cdr_id(self, cdr_id):
        """Sets the cdr_id of this CDR.

        The CDR ID of the retrieved CDR.  # noqa: E501

        :param cdr_id: The cdr_id of this CDR.  # noqa: E501
        :type: str
        """

        self._cdr_id = cdr_id

    @property
    def caller(self):
        """Gets the caller of this CDR.  # noqa: E501

        The MSISDN of the Caller from SIP 'From' header  # noqa: E501

        :return: The caller of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this CDR.

        The MSISDN of the Caller from SIP 'From' header  # noqa: E501

        :param caller: The caller of this CDR.  # noqa: E501
        :type: str
        """

        self._caller = caller

    @property
    def called(self):
        """Gets the called of this CDR.  # noqa: E501

        The MSISDN of the Callee from SIP 'To' header  # noqa: E501

        :return: The called of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._called

    @called.setter
    def called(self, called):
        """Sets the called of this CDR.

        The MSISDN of the Callee from SIP 'To' header  # noqa: E501

        :param called: The called of this CDR.  # noqa: E501
        :type: str
        """

        self._called = called

    @property
    def calldate(self):
        """Gets the calldate of this CDR.  # noqa: E501

        Start date and time of call in ISO 8601 format, with the configured timezone. It will be the time since the first SIP INVITE packet.  # noqa: E501

        :return: The calldate of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._calldate

    @calldate.setter
    def calldate(self, calldate):
        """Sets the calldate of this CDR.

        Start date and time of call in ISO 8601 format, with the configured timezone. It will be the time since the first SIP INVITE packet.  # noqa: E501

        :param calldate: The calldate of this CDR.  # noqa: E501
        :type: str
        """

        self._calldate = calldate

    @property
    def callend(self):
        """Gets the callend of this CDR.  # noqa: E501

        End date and time of call in ISO 8601 format, with the configured timezone. It will be the time of the last received packet.  # noqa: E501

        :return: The callend of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._callend

    @callend.setter
    def callend(self, callend):
        """Sets the callend of this CDR.

        End date and time of call in ISO 8601 format, with the configured timezone. It will be the time of the last received packet.  # noqa: E501

        :param callend: The callend of this CDR.  # noqa: E501
        :type: str
        """

        self._callend = callend

    @property
    def call_id(self):
        """Gets the call_id of this CDR.  # noqa: E501

        Call ID of the CDR in the database.  # noqa: E501

        :return: The call_id of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this CDR.

        Call ID of the CDR in the database.  # noqa: E501

        :param call_id: The call_id of this CDR.  # noqa: E501
        :type: str
        """

        self._call_id = call_id

    @property
    def duration(self):
        """Gets the duration of this CDR.  # noqa: E501

        Total duration of the call. (The interval between 'callend' - 'calldate' as number of seconds)  # noqa: E501

        :return: The duration of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CDR.

        Total duration of the call. (The interval between 'callend' - 'calldate' as number of seconds)  # noqa: E501

        :param duration: The duration of this CDR.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def connection_duration(self):
        """Gets the connection_duration of this CDR.  # noqa: E501

        Number of seconds the call was connected (seconds between SIP 200 OK and callend). Value will be 'null' if no SIP 200 OK packet is sent by the callee. Value will be '0' if SIP 200 OK is sent by the callee but no RTP packets were exchanged.  # noqa: E501

        :return: The connection_duration of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._connection_duration

    @connection_duration.setter
    def connection_duration(self, connection_duration):
        """Sets the connection_duration of this CDR.

        Number of seconds the call was connected (seconds between SIP 200 OK and callend). Value will be 'null' if no SIP 200 OK packet is sent by the callee. Value will be '0' if SIP 200 OK is sent by the callee but no RTP packets were exchanged.  # noqa: E501

        :param connection_duration: The connection_duration of this CDR.  # noqa: E501
        :type: str
        """

        self._connection_duration = connection_duration

    @property
    def sipcallerip(self):
        """Gets the sipcallerip of this CDR.  # noqa: E501

        IP address of the SIP caller.  # noqa: E501

        :return: The sipcallerip of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._sipcallerip

    @sipcallerip.setter
    def sipcallerip(self, sipcallerip):
        """Sets the sipcallerip of this CDR.

        IP address of the SIP caller.  # noqa: E501

        :param sipcallerip: The sipcallerip of this CDR.  # noqa: E501
        :type: str
        """

        self._sipcallerip = sipcallerip

    @property
    def sipcallerport(self):
        """Gets the sipcallerport of this CDR.  # noqa: E501

        Port number of the SIP caller.  # noqa: E501

        :return: The sipcallerport of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._sipcallerport

    @sipcallerport.setter
    def sipcallerport(self, sipcallerport):
        """Sets the sipcallerport of this CDR.

        Port number of the SIP caller.  # noqa: E501

        :param sipcallerport: The sipcallerport of this CDR.  # noqa: E501
        :type: str
        """

        self._sipcallerport = sipcallerport

    @property
    def sipcalledip(self):
        """Gets the sipcalledip of this CDR.  # noqa: E501

        IP address of the SIP callee.  # noqa: E501

        :return: The sipcalledip of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._sipcalledip

    @sipcalledip.setter
    def sipcalledip(self, sipcalledip):
        """Sets the sipcalledip of this CDR.

        IP address of the SIP callee.  # noqa: E501

        :param sipcalledip: The sipcalledip of this CDR.  # noqa: E501
        :type: str
        """

        self._sipcalledip = sipcalledip

    @property
    def sipcalledport(self):
        """Gets the sipcalledport of this CDR.  # noqa: E501

        Port number of the SIP callee.  # noqa: E501

        :return: The sipcalledport of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._sipcalledport

    @sipcalledport.setter
    def sipcalledport(self, sipcalledport):
        """Sets the sipcalledport of this CDR.

        Port number of the SIP callee.  # noqa: E501

        :param sipcalledport: The sipcalledport of this CDR.  # noqa: E501
        :type: str
        """

        self._sipcalledport = sipcalledport

    @property
    def codec_a(self):
        """Gets the codec_a of this CDR.  # noqa: E501

        CODEC of the caller for RTP stream.  # noqa: E501

        :return: The codec_a of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._codec_a

    @codec_a.setter
    def codec_a(self, codec_a):
        """Sets the codec_a of this CDR.

        CODEC of the caller for RTP stream.  # noqa: E501

        :param codec_a: The codec_a of this CDR.  # noqa: E501
        :type: str
        """

        self._codec_a = codec_a

    @property
    def codec_b(self):
        """Gets the codec_b of this CDR.  # noqa: E501

        CODEC of the callee for RTP stream.  # noqa: E501

        :return: The codec_b of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._codec_b

    @codec_b.setter
    def codec_b(self, codec_b):
        """Sets the codec_b of this CDR.

        CODEC of the callee for RTP stream.  # noqa: E501

        :param codec_b: The codec_b of this CDR.  # noqa: E501
        :type: str
        """

        self._codec_b = codec_b

    @property
    def a_last_rtp_from_end(self):
        """Gets the a_last_rtp_from_end of this CDR.  # noqa: E501

        Last RTP packet arrival time for caller (in seconds) before the call was closed.  # noqa: E501

        :return: The a_last_rtp_from_end of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._a_last_rtp_from_end

    @a_last_rtp_from_end.setter
    def a_last_rtp_from_end(self, a_last_rtp_from_end):
        """Sets the a_last_rtp_from_end of this CDR.

        Last RTP packet arrival time for caller (in seconds) before the call was closed.  # noqa: E501

        :param a_last_rtp_from_end: The a_last_rtp_from_end of this CDR.  # noqa: E501
        :type: str
        """

        self._a_last_rtp_from_end = a_last_rtp_from_end

    @property
    def b_last_rtp_from_end(self):
        """Gets the b_last_rtp_from_end of this CDR.  # noqa: E501

        Last RTP packet arrival time for callee (in seconds) before the call was closed.  # noqa: E501

        :return: The b_last_rtp_from_end of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._b_last_rtp_from_end

    @b_last_rtp_from_end.setter
    def b_last_rtp_from_end(self, b_last_rtp_from_end):
        """Sets the b_last_rtp_from_end of this CDR.

        Last RTP packet arrival time for callee (in seconds) before the call was closed.  # noqa: E501

        :param b_last_rtp_from_end: The b_last_rtp_from_end of this CDR.  # noqa: E501
        :type: str
        """

        self._b_last_rtp_from_end = b_last_rtp_from_end

    @property
    def cell_id_caller(self):
        """Gets the cell_id_caller of this CDR.  # noqa: E501

        Cell ID of the caller.  # noqa: E501

        :return: The cell_id_caller of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._cell_id_caller

    @cell_id_caller.setter
    def cell_id_caller(self, cell_id_caller):
        """Sets the cell_id_caller of this CDR.

        Cell ID of the caller.  # noqa: E501

        :param cell_id_caller: The cell_id_caller of this CDR.  # noqa: E501
        :type: str
        """

        self._cell_id_caller = cell_id_caller

    @property
    def cell_id_called(self):
        """Gets the cell_id_called of this CDR.  # noqa: E501

        Cell ID of the callee.  # noqa: E501

        :return: The cell_id_called of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._cell_id_called

    @cell_id_called.setter
    def cell_id_called(self, cell_id_called):
        """Sets the cell_id_called of this CDR.

        Cell ID of the callee.  # noqa: E501

        :param cell_id_called: The cell_id_called of this CDR.  # noqa: E501
        :type: str
        """

        self._cell_id_called = cell_id_called

    @property
    def imsi_contact(self):
        """Gets the imsi_contact of this CDR.  # noqa: E501

        IMSI of the caller/callee from the Contact URI User Part parameter.  # noqa: E501

        :return: The imsi_contact of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._imsi_contact

    @imsi_contact.setter
    def imsi_contact(self, imsi_contact):
        """Sets the imsi_contact of this CDR.

        IMSI of the caller/callee from the Contact URI User Part parameter.  # noqa: E501

        :param imsi_contact: The imsi_contact of this CDR.  # noqa: E501
        :type: str
        """

        self._imsi_contact = imsi_contact

    @property
    def imsi_request(self):
        """Gets the imsi_request of this CDR.  # noqa: E501

        IMSI of the caller/callee from the Request URI User Part parameter.  # noqa: E501

        :return: The imsi_request of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._imsi_request

    @imsi_request.setter
    def imsi_request(self, imsi_request):
        """Sets the imsi_request of this CDR.

        IMSI of the caller/callee from the Request URI User Part parameter.  # noqa: E501

        :param imsi_request: The imsi_request of this CDR.  # noqa: E501
        :type: str
        """

        self._imsi_request = imsi_request

    @property
    def session_id(self):
        """Gets the session_id of this CDR.  # noqa: E501

        Session-ID of the call  # noqa: E501

        :return: The session_id of this CDR.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CDR.

        Session-ID of the call  # noqa: E501

        :param session_id: The session_id of this CDR.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CDR, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CDR):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
