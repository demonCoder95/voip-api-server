# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CDR(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cdr_id: str=None, caller: str=None, called: str=None, calldate: str=None, callend: str=None, call_id: str=None, duration: str=None, connection_duration: str=None, sipcallerip: str=None, sipcallerport: str=None, sipcalledip: str=None, sipcalledport: str=None, codec_a: str=None, codec_b: str=None, a_last_rtp_from_end: str=None, b_last_rtp_from_end: str=None, cell_id_caller: str=None, cell_id_called: str=None, imsi_contact: str=None, imsi_request: str=None, session_id: str=None):  # noqa: E501
        """CDR - a model defined in Swagger

        :param cdr_id: The cdr_id of this CDR.  # noqa: E501
        :type cdr_id: str
        :param caller: The caller of this CDR.  # noqa: E501
        :type caller: str
        :param called: The called of this CDR.  # noqa: E501
        :type called: str
        :param calldate: The calldate of this CDR.  # noqa: E501
        :type calldate: str
        :param callend: The callend of this CDR.  # noqa: E501
        :type callend: str
        :param call_id: The call_id of this CDR.  # noqa: E501
        :type call_id: str
        :param duration: The duration of this CDR.  # noqa: E501
        :type duration: str
        :param connection_duration: The connection_duration of this CDR.  # noqa: E501
        :type connection_duration: str
        :param sipcallerip: The sipcallerip of this CDR.  # noqa: E501
        :type sipcallerip: str
        :param sipcallerport: The sipcallerport of this CDR.  # noqa: E501
        :type sipcallerport: str
        :param sipcalledip: The sipcalledip of this CDR.  # noqa: E501
        :type sipcalledip: str
        :param sipcalledport: The sipcalledport of this CDR.  # noqa: E501
        :type sipcalledport: str
        :param codec_a: The codec_a of this CDR.  # noqa: E501
        :type codec_a: str
        :param codec_b: The codec_b of this CDR.  # noqa: E501
        :type codec_b: str
        :param a_last_rtp_from_end: The a_last_rtp_from_end of this CDR.  # noqa: E501
        :type a_last_rtp_from_end: str
        :param b_last_rtp_from_end: The b_last_rtp_from_end of this CDR.  # noqa: E501
        :type b_last_rtp_from_end: str
        :param cell_id_caller: The cell_id_caller of this CDR.  # noqa: E501
        :type cell_id_caller: str
        :param cell_id_called: The cell_id_called of this CDR.  # noqa: E501
        :type cell_id_called: str
        :param imsi_contact: The imsi_contact of this CDR.  # noqa: E501
        :type imsi_contact: str
        :param imsi_request: The imsi_request of this CDR.  # noqa: E501
        :type imsi_request: str
        :param session_id: The session_id of this CDR.  # noqa: E501
        :type session_id: str
        """
        self.swagger_types = {
            'cdr_id': str,
            'caller': str,
            'called': str,
            'calldate': str,
            'callend': str,
            'call_id': str,
            'duration': str,
            'connection_duration': str,
            'sipcallerip': str,
            'sipcallerport': str,
            'sipcalledip': str,
            'sipcalledport': str,
            'codec_a': str,
            'codec_b': str,
            'a_last_rtp_from_end': str,
            'b_last_rtp_from_end': str,
            'cell_id_caller': str,
            'cell_id_called': str,
            'imsi_contact': str,
            'imsi_request': str,
            'session_id': str
        }

        self.attribute_map = {
            'cdr_id': 'cdrId',
            'caller': 'caller',
            'called': 'called',
            'calldate': 'calldate',
            'callend': 'callend',
            'call_id': 'callId',
            'duration': 'duration',
            'connection_duration': 'connection_duration',
            'sipcallerip': 'sipcallerip',
            'sipcallerport': 'sipcallerport',
            'sipcalledip': 'sipcalledip',
            'sipcalledport': 'sipcalledport',
            'codec_a': 'codec_a',
            'codec_b': 'codec_b',
            'a_last_rtp_from_end': 'a_last_rtp_from_end',
            'b_last_rtp_from_end': 'b_last_rtp_from_end',
            'cell_id_caller': 'Cell_ID_Caller',
            'cell_id_called': 'Cell_ID_Called',
            'imsi_contact': 'IMSI-Contact',
            'imsi_request': 'IMSI-Request',
            'session_id': 'Session-ID'
        }
        self._cdr_id = cdr_id
        self._caller = caller
        self._called = called
        self._calldate = calldate
        self._callend = callend
        self._call_id = call_id
        self._duration = duration
        self._connection_duration = connection_duration
        self._sipcallerip = sipcallerip
        self._sipcallerport = sipcallerport
        self._sipcalledip = sipcalledip
        self._sipcalledport = sipcalledport
        self._codec_a = codec_a
        self._codec_b = codec_b
        self._a_last_rtp_from_end = a_last_rtp_from_end
        self._b_last_rtp_from_end = b_last_rtp_from_end
        self._cell_id_caller = cell_id_caller
        self._cell_id_called = cell_id_called
        self._imsi_contact = imsi_contact
        self._imsi_request = imsi_request
        self._session_id = session_id

    @classmethod
    def from_dict(cls, dikt) -> 'CDR':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CDR of this CDR.  # noqa: E501
        :rtype: CDR
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cdr_id(self) -> str:
        """Gets the cdr_id of this CDR.

        The CDR ID of the retrieved CDR.  # noqa: E501

        :return: The cdr_id of this CDR.
        :rtype: str
        """
        return self._cdr_id

    @cdr_id.setter
    def cdr_id(self, cdr_id: str):
        """Sets the cdr_id of this CDR.

        The CDR ID of the retrieved CDR.  # noqa: E501

        :param cdr_id: The cdr_id of this CDR.
        :type cdr_id: str
        """

        self._cdr_id = cdr_id

    @property
    def caller(self) -> str:
        """Gets the caller of this CDR.

        The MSISDN of the Caller from SIP 'From' header  # noqa: E501

        :return: The caller of this CDR.
        :rtype: str
        """
        return self._caller

    @caller.setter
    def caller(self, caller: str):
        """Sets the caller of this CDR.

        The MSISDN of the Caller from SIP 'From' header  # noqa: E501

        :param caller: The caller of this CDR.
        :type caller: str
        """

        self._caller = caller

    @property
    def called(self) -> str:
        """Gets the called of this CDR.

        The MSISDN of the Callee from SIP 'To' header  # noqa: E501

        :return: The called of this CDR.
        :rtype: str
        """
        return self._called

    @called.setter
    def called(self, called: str):
        """Sets the called of this CDR.

        The MSISDN of the Callee from SIP 'To' header  # noqa: E501

        :param called: The called of this CDR.
        :type called: str
        """

        self._called = called

    @property
    def calldate(self) -> str:
        """Gets the calldate of this CDR.

        Start date and time of call in ISO 8601 format, with the configured timezone. It will be the time since the first SIP INVITE packet.  # noqa: E501

        :return: The calldate of this CDR.
        :rtype: str
        """
        return self._calldate

    @calldate.setter
    def calldate(self, calldate: str):
        """Sets the calldate of this CDR.

        Start date and time of call in ISO 8601 format, with the configured timezone. It will be the time since the first SIP INVITE packet.  # noqa: E501

        :param calldate: The calldate of this CDR.
        :type calldate: str
        """

        self._calldate = calldate

    @property
    def callend(self) -> str:
        """Gets the callend of this CDR.

        End date and time of call in ISO 8601 format, with the configured timezone. It will be the time of the last received packet.  # noqa: E501

        :return: The callend of this CDR.
        :rtype: str
        """
        return self._callend

    @callend.setter
    def callend(self, callend: str):
        """Sets the callend of this CDR.

        End date and time of call in ISO 8601 format, with the configured timezone. It will be the time of the last received packet.  # noqa: E501

        :param callend: The callend of this CDR.
        :type callend: str
        """

        self._callend = callend

    @property
    def call_id(self) -> str:
        """Gets the call_id of this CDR.

        Call ID of the CDR in the database.  # noqa: E501

        :return: The call_id of this CDR.
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id: str):
        """Sets the call_id of this CDR.

        Call ID of the CDR in the database.  # noqa: E501

        :param call_id: The call_id of this CDR.
        :type call_id: str
        """

        self._call_id = call_id

    @property
    def duration(self) -> str:
        """Gets the duration of this CDR.

        Total duration of the call. (The interval between 'callend' - 'calldate' as number of seconds)  # noqa: E501

        :return: The duration of this CDR.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration: str):
        """Sets the duration of this CDR.

        Total duration of the call. (The interval between 'callend' - 'calldate' as number of seconds)  # noqa: E501

        :param duration: The duration of this CDR.
        :type duration: str
        """

        self._duration = duration

    @property
    def connection_duration(self) -> str:
        """Gets the connection_duration of this CDR.

        Number of seconds the call was connected (seconds between SIP 200 OK and callend). Value will be 'null' if no SIP 200 OK packet is sent by the callee. Value will be '0' if SIP 200 OK is sent by the callee but no RTP packets were exchanged.  # noqa: E501

        :return: The connection_duration of this CDR.
        :rtype: str
        """
        return self._connection_duration

    @connection_duration.setter
    def connection_duration(self, connection_duration: str):
        """Sets the connection_duration of this CDR.

        Number of seconds the call was connected (seconds between SIP 200 OK and callend). Value will be 'null' if no SIP 200 OK packet is sent by the callee. Value will be '0' if SIP 200 OK is sent by the callee but no RTP packets were exchanged.  # noqa: E501

        :param connection_duration: The connection_duration of this CDR.
        :type connection_duration: str
        """

        self._connection_duration = connection_duration

    @property
    def sipcallerip(self) -> str:
        """Gets the sipcallerip of this CDR.

        IP address of the SIP caller.  # noqa: E501

        :return: The sipcallerip of this CDR.
        :rtype: str
        """
        return self._sipcallerip

    @sipcallerip.setter
    def sipcallerip(self, sipcallerip: str):
        """Sets the sipcallerip of this CDR.

        IP address of the SIP caller.  # noqa: E501

        :param sipcallerip: The sipcallerip of this CDR.
        :type sipcallerip: str
        """

        self._sipcallerip = sipcallerip

    @property
    def sipcallerport(self) -> str:
        """Gets the sipcallerport of this CDR.

        Port number of the SIP caller.  # noqa: E501

        :return: The sipcallerport of this CDR.
        :rtype: str
        """
        return self._sipcallerport

    @sipcallerport.setter
    def sipcallerport(self, sipcallerport: str):
        """Sets the sipcallerport of this CDR.

        Port number of the SIP caller.  # noqa: E501

        :param sipcallerport: The sipcallerport of this CDR.
        :type sipcallerport: str
        """

        self._sipcallerport = sipcallerport

    @property
    def sipcalledip(self) -> str:
        """Gets the sipcalledip of this CDR.

        IP address of the SIP callee.  # noqa: E501

        :return: The sipcalledip of this CDR.
        :rtype: str
        """
        return self._sipcalledip

    @sipcalledip.setter
    def sipcalledip(self, sipcalledip: str):
        """Sets the sipcalledip of this CDR.

        IP address of the SIP callee.  # noqa: E501

        :param sipcalledip: The sipcalledip of this CDR.
        :type sipcalledip: str
        """

        self._sipcalledip = sipcalledip

    @property
    def sipcalledport(self) -> str:
        """Gets the sipcalledport of this CDR.

        Port number of the SIP callee.  # noqa: E501

        :return: The sipcalledport of this CDR.
        :rtype: str
        """
        return self._sipcalledport

    @sipcalledport.setter
    def sipcalledport(self, sipcalledport: str):
        """Sets the sipcalledport of this CDR.

        Port number of the SIP callee.  # noqa: E501

        :param sipcalledport: The sipcalledport of this CDR.
        :type sipcalledport: str
        """

        self._sipcalledport = sipcalledport

    @property
    def codec_a(self) -> str:
        """Gets the codec_a of this CDR.

        CODEC of the caller for RTP stream.  # noqa: E501

        :return: The codec_a of this CDR.
        :rtype: str
        """
        return self._codec_a

    @codec_a.setter
    def codec_a(self, codec_a: str):
        """Sets the codec_a of this CDR.

        CODEC of the caller for RTP stream.  # noqa: E501

        :param codec_a: The codec_a of this CDR.
        :type codec_a: str
        """

        self._codec_a = codec_a

    @property
    def codec_b(self) -> str:
        """Gets the codec_b of this CDR.

        CODEC of the callee for RTP stream.  # noqa: E501

        :return: The codec_b of this CDR.
        :rtype: str
        """
        return self._codec_b

    @codec_b.setter
    def codec_b(self, codec_b: str):
        """Sets the codec_b of this CDR.

        CODEC of the callee for RTP stream.  # noqa: E501

        :param codec_b: The codec_b of this CDR.
        :type codec_b: str
        """

        self._codec_b = codec_b

    @property
    def a_last_rtp_from_end(self) -> str:
        """Gets the a_last_rtp_from_end of this CDR.

        Last RTP packet arrival time for caller (in seconds) before the call was closed.  # noqa: E501

        :return: The a_last_rtp_from_end of this CDR.
        :rtype: str
        """
        return self._a_last_rtp_from_end

    @a_last_rtp_from_end.setter
    def a_last_rtp_from_end(self, a_last_rtp_from_end: str):
        """Sets the a_last_rtp_from_end of this CDR.

        Last RTP packet arrival time for caller (in seconds) before the call was closed.  # noqa: E501

        :param a_last_rtp_from_end: The a_last_rtp_from_end of this CDR.
        :type a_last_rtp_from_end: str
        """

        self._a_last_rtp_from_end = a_last_rtp_from_end

    @property
    def b_last_rtp_from_end(self) -> str:
        """Gets the b_last_rtp_from_end of this CDR.

        Last RTP packet arrival time for callee (in seconds) before the call was closed.  # noqa: E501

        :return: The b_last_rtp_from_end of this CDR.
        :rtype: str
        """
        return self._b_last_rtp_from_end

    @b_last_rtp_from_end.setter
    def b_last_rtp_from_end(self, b_last_rtp_from_end: str):
        """Sets the b_last_rtp_from_end of this CDR.

        Last RTP packet arrival time for callee (in seconds) before the call was closed.  # noqa: E501

        :param b_last_rtp_from_end: The b_last_rtp_from_end of this CDR.
        :type b_last_rtp_from_end: str
        """

        self._b_last_rtp_from_end = b_last_rtp_from_end

    @property
    def cell_id_caller(self) -> str:
        """Gets the cell_id_caller of this CDR.

        Cell ID of the caller.  # noqa: E501

        :return: The cell_id_caller of this CDR.
        :rtype: str
        """
        return self._cell_id_caller

    @cell_id_caller.setter
    def cell_id_caller(self, cell_id_caller: str):
        """Sets the cell_id_caller of this CDR.

        Cell ID of the caller.  # noqa: E501

        :param cell_id_caller: The cell_id_caller of this CDR.
        :type cell_id_caller: str
        """

        self._cell_id_caller = cell_id_caller

    @property
    def cell_id_called(self) -> str:
        """Gets the cell_id_called of this CDR.

        Cell ID of the callee.  # noqa: E501

        :return: The cell_id_called of this CDR.
        :rtype: str
        """
        return self._cell_id_called

    @cell_id_called.setter
    def cell_id_called(self, cell_id_called: str):
        """Sets the cell_id_called of this CDR.

        Cell ID of the callee.  # noqa: E501

        :param cell_id_called: The cell_id_called of this CDR.
        :type cell_id_called: str
        """

        self._cell_id_called = cell_id_called

    @property
    def imsi_contact(self) -> str:
        """Gets the imsi_contact of this CDR.

        IMSI of the caller/callee from the Contact URI User Part parameter.  # noqa: E501

        :return: The imsi_contact of this CDR.
        :rtype: str
        """
        return self._imsi_contact

    @imsi_contact.setter
    def imsi_contact(self, imsi_contact: str):
        """Sets the imsi_contact of this CDR.

        IMSI of the caller/callee from the Contact URI User Part parameter.  # noqa: E501

        :param imsi_contact: The imsi_contact of this CDR.
        :type imsi_contact: str
        """

        self._imsi_contact = imsi_contact

    @property
    def imsi_request(self) -> str:
        """Gets the imsi_request of this CDR.

        IMSI of the caller/callee from the Request URI User Part parameter.  # noqa: E501

        :return: The imsi_request of this CDR.
        :rtype: str
        """
        return self._imsi_request

    @imsi_request.setter
    def imsi_request(self, imsi_request: str):
        """Sets the imsi_request of this CDR.

        IMSI of the caller/callee from the Request URI User Part parameter.  # noqa: E501

        :param imsi_request: The imsi_request of this CDR.
        :type imsi_request: str
        """

        self._imsi_request = imsi_request

    @property
    def session_id(self) -> str:
        """Gets the session_id of this CDR.

        Session-ID of the call  # noqa: E501

        :return: The session_id of this CDR.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str):
        """Sets the session_id of this CDR.

        Session-ID of the call  # noqa: E501

        :param session_id: The session_id of this CDR.
        :type session_id: str
        """

        self._session_id = session_id
